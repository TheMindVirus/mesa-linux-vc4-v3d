[{"name": "auto_features", "value": "auto", "section": "core", "machine": "any", "choices": ["enabled", "disabled", "auto"], "type": "combo", "description": "Override value of all 'auto' features"}, {"name": "backend", "value": "ninja", "section": "core", "machine": "any", "choices": ["ninja", "vs", "vs2010", "vs2015", "vs2017", "vs2019", "xcode"], "type": "combo", "description": "Backend to use"}, {"name": "buildtype", "value": "debugoptimized", "section": "core", "machine": "any", "choices": ["plain", "debug", "debugoptimized", "release", "minsize", "custom"], "type": "combo", "description": "Build type to use"}, {"name": "debug", "value": true, "section": "core", "machine": "any", "type": "boolean", "description": "Debug"}, {"name": "default_library", "value": "shared", "section": "core", "machine": "any", "choices": ["shared", "static", "both"], "type": "combo", "description": "Default library type"}, {"name": "install_umask", "value": 18, "section": "core", "machine": "any", "type": "integer", "description": "Default umask to apply on permissions of installed files"}, {"name": "layout", "value": "mirror", "section": "core", "machine": "any", "choices": ["mirror", "flat"], "type": "combo", "description": "Build directory layout"}, {"name": "optimization", "value": "2", "section": "core", "machine": "any", "choices": ["0", "g", "1", "2", "3", "s"], "type": "combo", "description": "Optimization level"}, {"name": "strip", "value": false, "section": "core", "machine": "any", "type": "boolean", "description": "Strip targets on install"}, {"name": "unity", "value": "off", "section": "core", "machine": "any", "choices": ["on", "off", "subprojects"], "type": "combo", "description": "Unity build"}, {"name": "warning_level", "value": "1", "section": "core", "machine": "any", "choices": ["0", "1", "2", "3"], "type": "combo", "description": "Compiler warning level to use"}, {"name": "werror", "value": false, "section": "core", "machine": "any", "type": "boolean", "description": "Treat warnings as errors"}, {"name": "wrap_mode", "value": "default", "section": "core", "machine": "any", "choices": ["default", "nofallback", "nodownload", "forcefallback"], "type": "combo", "description": "Wrap mode"}, {"name": "cmake_prefix_path", "value": [], "section": "core", "machine": "host", "type": "array", "description": "List of additional prefixes for cmake to search"}, {"name": "pkg_config_path", "value": [], "section": "core", "machine": "host", "type": "array", "description": "List of additional paths for pkg-config to search"}, {"name": "build.cmake_prefix_path", "value": [], "section": "core", "machine": "build", "type": "array", "description": "List of additional prefixes for cmake to search"}, {"name": "build.pkg_config_path", "value": [], "section": "core", "machine": "build", "type": "array", "description": "List of additional paths for pkg-config to search"}, {"name": "backend_max_links", "value": 0, "section": "backend", "machine": "any", "type": "integer", "description": "Maximum number of linker processes to run or 0 for no limit"}, {"name": "b_asneeded", "value": true, "section": "base", "machine": "any", "type": "boolean", "description": "Use -Wl,--as-needed when linking"}, {"name": "b_colorout", "value": "always", "section": "base", "machine": "any", "choices": ["auto", "always", "never"], "type": "combo", "description": "Use colored output"}, {"name": "b_coverage", "value": false, "section": "base", "machine": "any", "type": "boolean", "description": "Enable coverage tracking."}, {"name": "b_lto", "value": false, "section": "base", "machine": "any", "type": "boolean", "description": "Use link time optimization"}, {"name": "b_lundef", "value": true, "section": "base", "machine": "any", "type": "boolean", "description": "Use -Wl,--no-undefined when linking"}, {"name": "b_ndebug", "value": "if-release", "section": "base", "machine": "any", "choices": ["true", "false", "if-release"], "type": "combo", "description": "Disable asserts"}, {"name": "b_pch", "value": true, "section": "base", "machine": "any", "type": "boolean", "description": "Use precompiled headers"}, {"name": "b_pgo", "value": "off", "section": "base", "machine": "any", "choices": ["off", "generate", "use"], "type": "combo", "description": "Use profile guided optimization"}, {"name": "b_pie", "value": false, "section": "base", "machine": "any", "type": "boolean", "description": "Build executables as position independent"}, {"name": "b_sanitize", "value": "none", "section": "base", "machine": "any", "choices": ["none", "address", "thread", "undefined", "memory", "address,undefined"], "type": "combo", "description": "Code sanitizer to use"}, {"name": "b_staticpic", "value": true, "section": "base", "machine": "any", "type": "boolean", "description": "Build static libraries as position independent"}, {"name": "c_args", "value": [], "section": "compiler", "machine": "host", "type": "array", "description": "Extra arguments passed to the C compiler"}, {"name": "c_link_args", "value": [], "section": "compiler", "machine": "host", "type": "array", "description": "Extra arguments passed to the C linker"}, {"name": "c_std", "value": "c99", "section": "compiler", "machine": "host", "choices": ["none", "c89", "c99", "c11", "c17", "c18", "gnu89", "gnu99", "gnu11", "gnu17", "gnu18"], "type": "combo", "description": "C language standard to use"}, {"name": "cpp_args", "value": [], "section": "compiler", "machine": "host", "type": "array", "description": "Extra arguments passed to the C++ compiler"}, {"name": "cpp_debugstl", "value": false, "section": "compiler", "machine": "host", "type": "boolean", "description": "STL debug mode"}, {"name": "cpp_eh", "value": "default", "section": "compiler", "machine": "host", "choices": ["none", "default", "a", "s", "sc"], "type": "combo", "description": "C++ exception handling type."}, {"name": "cpp_link_args", "value": [], "section": "compiler", "machine": "host", "type": "array", "description": "Extra arguments passed to the C++ linker"}, {"name": "cpp_std", "value": "c++14", "section": "compiler", "machine": "host", "choices": ["none", "c++98", "c++03", "c++11", "c++14", "c++17", "c++1z", "c++2a", "gnu++03", "gnu++11", "gnu++14", "gnu++17", "gnu++1z", "gnu++2a"], "type": "combo", "description": "C++ language standard to use"}, {"name": "build.c_args", "value": [], "section": "compiler", "machine": "build", "type": "array", "description": "Extra arguments passed to the C compiler"}, {"name": "build.c_link_args", "value": [], "section": "compiler", "machine": "build", "type": "array", "description": "Extra arguments passed to the C linker"}, {"name": "build.c_std", "value": "c99", "section": "compiler", "machine": "build", "choices": ["none", "c89", "c99", "c11", "c17", "c18", "gnu89", "gnu99", "gnu11", "gnu17", "gnu18"], "type": "combo", "description": "C language standard to use"}, {"name": "build.cpp_args", "value": [], "section": "compiler", "machine": "build", "type": "array", "description": "Extra arguments passed to the C++ compiler"}, {"name": "build.cpp_debugstl", "value": false, "section": "compiler", "machine": "build", "type": "boolean", "description": "STL debug mode"}, {"name": "build.cpp_eh", "value": "default", "section": "compiler", "machine": "build", "choices": ["none", "default", "a", "s", "sc"], "type": "combo", "description": "C++ exception handling type."}, {"name": "build.cpp_link_args", "value": [], "section": "compiler", "machine": "build", "type": "array", "description": "Extra arguments passed to the C++ linker"}, {"name": "build.cpp_std", "value": "c++14", "section": "compiler", "machine": "build", "choices": ["none", "c++98", "c++03", "c++11", "c++14", "c++17", "c++1z", "c++2a", "gnu++03", "gnu++11", "gnu++14", "gnu++17", "gnu++1z", "gnu++2a"], "type": "combo", "description": "C++ language standard to use"}, {"name": "bindir", "value": "bin", "section": "directory", "machine": "any", "type": "string", "description": "Executable directory"}, {"name": "datadir", "value": "share", "section": "directory", "machine": "any", "type": "string", "description": "Data file directory"}, {"name": "includedir", "value": "include", "section": "directory", "machine": "any", "type": "string", "description": "Header file directory"}, {"name": "infodir", "value": "share/info", "section": "directory", "machine": "any", "type": "string", "description": "Info page directory"}, {"name": "libdir", "value": "lib/arm-linux-gnueabihf", "section": "directory", "machine": "any", "type": "string", "description": "Library directory"}, {"name": "libexecdir", "value": "libexec", "section": "directory", "machine": "any", "type": "string", "description": "Library executable directory"}, {"name": "localedir", "value": "share/locale", "section": "directory", "machine": "any", "type": "string", "description": "Locale data directory"}, {"name": "localstatedir", "value": "var", "section": "directory", "machine": "any", "type": "string", "description": "Localstate data directory"}, {"name": "mandir", "value": "share/man", "section": "directory", "machine": "any", "type": "string", "description": "Manual page directory"}, {"name": "prefix", "value": "/usr/local", "section": "directory", "machine": "any", "type": "string", "description": "Installation prefix"}, {"name": "sbindir", "value": "sbin", "section": "directory", "machine": "any", "type": "string", "description": "System executable directory"}, {"name": "sharedstatedir", "value": "com", "section": "directory", "machine": "any", "type": "string", "description": "Architecture-independent data directory"}, {"name": "sysconfdir", "value": "etc", "section": "directory", "machine": "any", "type": "string", "description": "Sysconf data directory"}, {"name": "android-stub", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Build against android-stub"}, {"name": "build-aco-tests", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Build ACO tests. These require RADV and glslang but not an AMD GPU."}, {"name": "build-tests", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Build unit tests. Currently this will build *all* unit tests except the ACO tests, which may build more than expected."}, {"name": "d3d-drivers-path", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Location of D3D drivers. Default: $libdir/d3d"}, {"name": "dri-drivers", "value": ["auto"], "section": "user", "machine": "any", "type": "array", "description": "List of dri drivers to build. If this is set to auto all drivers applicable to the target OS/architecture will be built"}, {"name": "dri-drivers-path", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Location to install dri drivers. Default: $libdir/dri."}, {"name": "dri-search-path", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Locations to search for dri drivers, passed as colon separated list. Default: dri-drivers-path."}, {"name": "dri3", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "disabled", "enabled"], "type": "combo", "description": "enable support for dri3"}, {"name": "egl", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Build support for EGL platform"}, {"name": "egl-lib-suffix", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Suffix to append to EGL library name.  Default: none."}, {"name": "gallium-drivers", "value": ["vc4", "v3d", "swrast"], "section": "user", "machine": "any", "type": "array", "description": "List of gallium drivers to build. If this is set to auto all drivers applicable to the target OS/architecture will be built"}, {"name": "gallium-extra-hud", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Enable HUD block/NIC I/O HUD status support"}, {"name": "gallium-nine", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "build gallium \"nine\" Direct3D 9.x frontend."}, {"name": "gallium-omx", "value": "disabled", "section": "user", "machine": "any", "choices": ["auto", "disabled", "bellagio", "tizonia"], "type": "combo", "description": "enable gallium omx frontend."}, {"name": "gallium-opencl", "value": "disabled", "section": "user", "machine": "any", "choices": ["icd", "standalone", "disabled"], "type": "combo", "description": "build gallium \"clover\" OpenCL frontend."}, {"name": "gallium-va", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "enable gallium va frontend."}, {"name": "gallium-vdpau", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "enable gallium vdpau frontend."}, {"name": "gallium-xa", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "enable gallium xa frontend."}, {"name": "gallium-xvmc", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "enable gallium xvmc frontend."}, {"name": "gbm", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Build support for gbm platform"}, {"name": "gles-lib-suffix", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Suffix to append to GLES library names.  Default: none."}, {"name": "gles1", "value": "enabled", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Build support for OpenGL ES 1.x"}, {"name": "gles2", "value": "enabled", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Build support for OpenGL ES 2.x and 3.x"}, {"name": "glvnd", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Enable GLVND support."}, {"name": "glx", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "disabled", "dri", "xlib", "gallium-xlib"], "type": "combo", "description": "Build support for GLX platform"}, {"name": "glx-direct", "value": true, "section": "user", "machine": "any", "type": "boolean", "description": "Enable direct rendering in GLX and EGL for DRI"}, {"name": "glx-read-only-text", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Disable writable .text section on x86 (decreases performance)"}, {"name": "install-intel-gpu-tests", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Build and install Intel unit tests which require the GPU.  This option is for developers and the Intel CI system only."}, {"name": "libunwind", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Use libunwind for stack-traces"}, {"name": "llvm", "value": "disabled", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Build with LLVM support."}, {"name": "lmsensors", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Enable HUD lmsensors support."}, {"name": "omx-libs-path", "value": "", "section": "user", "machine": "any", "type": "string", "description": "path to put omx libraries. defaults to omx-bellagio pkg-config pluginsdir."}, {"name": "opencl-spirv", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "build gallium \"clover\" OpenCL frontend with SPIR-V binary support."}, {"name": "opengl", "value": true, "section": "user", "machine": "any", "type": "boolean", "description": "Build support for OpenGL (all versions)"}, {"name": "osmesa", "value": "none", "section": "user", "machine": "any", "choices": ["none", "classic", "gallium"], "type": "combo", "description": "Build OSmesa."}, {"name": "osmesa-bits", "value": "8", "section": "user", "machine": "any", "choices": ["8", "16", "32"], "type": "combo", "description": "Number of channel bits for OSMesa."}, {"name": "platform-sdk-version", "value": 25, "section": "user", "machine": "any", "type": "integer", "description": "Android Platform SDK version. Default: Nougat version."}, {"name": "platforms", "value": ["x11"], "section": "user", "machine": "any", "type": "array", "description": "window systems to support. If this is set to `auto`, all platforms applicable will be enabled."}, {"name": "power8", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Enable power8 optimizations."}, {"name": "prefer-iris", "value": true, "section": "user", "machine": "any", "type": "boolean", "description": "Prefer new Intel iris driver over older i965 driver"}, {"name": "selinux", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Build an SELinux-aware Mesa"}, {"name": "shader-cache", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Build with on-disk shader cache support"}, {"name": "shared-glapi", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Whether to build a shared or static glapi. Defaults to false on Windows, true elsewhere"}, {"name": "shared-llvm", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Whether to link LLVM shared or statically."}, {"name": "shared-swr", "value": true, "section": "user", "machine": "any", "type": "boolean", "description": "Whether to link SWR shared or statically."}, {"name": "swr-arches", "value": ["avx", "avx2"], "section": "user", "machine": "any", "type": "array", "description": "Architectures to build SWR support for."}, {"name": "tools", "value": ["glsl"], "section": "user", "machine": "any", "type": "array", "description": "List of tools to build. (Note: `intel-ui` selects `intel`)"}, {"name": "va-libs-path", "value": "", "section": "user", "machine": "any", "type": "string", "description": "path to put va libraries. defaults to $libdir/dri."}, {"name": "valgrind", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Build with valgrind support"}, {"name": "vdpau-libs-path", "value": "", "section": "user", "machine": "any", "type": "string", "description": "path to put vdpau libraries. defaults to $libdir/vdpau."}, {"name": "vulkan-device-select-layer", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Whether to build the vulkan device select layer"}, {"name": "vulkan-drivers", "value": ["auto"], "section": "user", "machine": "any", "type": "array", "description": "List of vulkan drivers to build. If this is set to auto all drivers applicable to the target OS/architecture will be built"}, {"name": "vulkan-icd-dir", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Location relative to prefix to put vulkan icds on install. Default: $datadir/vulkan/icd.d"}, {"name": "vulkan-overlay-layer", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Whether to build the vulkan overlay layer"}, {"name": "xlib-lease", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Enable VK_EXT_acquire_xlib_display."}, {"name": "xvmc-libs-path", "value": "", "section": "user", "machine": "any", "type": "string", "description": "path to put xvmc libraries. defaults to $libdir."}, {"name": "zstd", "value": "auto", "section": "user", "machine": "any", "choices": ["auto", "true", "false", "enabled", "disabled"], "type": "combo", "description": "Use ZSTD instead of ZLIB in some cases."}, {"name": "errorlogs", "value": true, "section": "test", "machine": "any", "type": "boolean", "description": "Whether to print the logs from failing tests"}, {"name": "stdsplit", "value": true, "section": "test", "machine": "any", "type": "boolean", "description": "Split stdout and stderr in test logs"}]